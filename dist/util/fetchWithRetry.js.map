{"version":3,"file":"fetchWithRetry.js","sourceRoot":"","sources":["../../src/util/fetchWithRetry.ts"],"names":[],"mappings":";;AAQA,iCAuBC;AA/BD;;;;;;;GAOG;AACY,KAAK,UAAU,cAAc,CAC1C,KAAwB,EACxB,IAAkB,EAClB,UAAkB,CAAC,EACnB,aAAqB,IAAI;IAEzB,KAAK,IAAI,OAAO,GAAG,CAAC,GAAI,OAAO,EAAE,EAAE,CAAC;QAClC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1C,IACE,QAAQ,CAAC,EAAE;gBACX,OAAO,IAAI,OAAO;gBAClB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC1C,CAAC;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,OAAO,IAAI,OAAO,EAAE,CAAC;gBACvB,MAAM,KAAK,CAAC;YACd,CAAC;QACH,CAAC;QACD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;AACH,CAAC","sourcesContent":["/**\n * Retry a fetch request when transient errors occur.\n * Used to mitigate 502-504 responses from G-Portal.\n * @param input Request info passed to fetch\n * @param init Request init options\n * @param retries Number of retries\n * @param retryDelay Delay between retries in ms\n */\nexport default async function fetchWithRetry(\n  input: RequestInfo | URL,\n  init?: RequestInit,\n  retries: number = 2,\n  retryDelay: number = 1000\n): Promise<Response> {\n  for (let attempt = 0; ; attempt++) {\n    try {\n      const response = await fetch(input, init);\n      if (\n        response.ok ||\n        attempt >= retries ||\n        ![502, 503, 504].includes(response.status)\n      ) {\n        return response;\n      }\n    } catch (error) {\n      if (attempt >= retries) {\n        throw error;\n      }\n    }\n    await new Promise((resolve) => setTimeout(resolve, retryDelay * (attempt + 1)));\n  }\n}\n"]}
