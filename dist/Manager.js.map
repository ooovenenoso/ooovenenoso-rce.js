{"version":3,"file":"Manager.js","sourceRoot":"","sources":["../src/Manager.ts"],"names":[],"mappings":"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","sourcesContent":["import GPortalAuth from \"./auth/Auth\";\nimport GPortalSocket from \"./socket/Socket\";\nimport ServerManager from \"./servers/Servers\";\nimport RCELogger from \"./logger/Logger\";\nimport type { AuthOptions, LoggerOptions, RCEEventTypes } from \"./interfaces\";\nimport { EventEmitter } from \"events\";\nimport { ILogger } from \"./logger/interfaces\";\nimport CommandHandler from \"./servers/CommandHandler\";\nimport { RCEEvent } from \"./constants\";\n\nclass RCEEventManager extends EventEmitter {\n  emit<K extends keyof RCEEventTypes>(\n    event: K,\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\n  ): boolean {\n    return super.emit(event, ...args);\n  }\n\n  on<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.on(event, listener);\n  }\n\n  once<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.once(event, listener);\n  }\n\n  off<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.off(event, listener);\n  }\n}\n\nexport default class RCEManager {\n  private _auth: GPortalAuth;\n  private _socket: GPortalSocket;\n  private _plugins: Map<string, any> = new Map();\n  public logger: ILogger;\n  public events: RCEEventManager = new RCEEventManager();\n  public servers: ServerManager;\n\n  public constructor() {\n    this.events.on(RCEEvent.Error, (payload) => {\n      if (payload.server) {\n        this.logger.error(`[${payload.server.identifier}] ${payload.error}`);\n      } else {\n        this.logger.error(payload.error);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param auth {AuthOptions} - The authentication options for the GPortal API\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```js\n   * const rce = new RCEManager();\n   * await rce.init({\n   *  username: \"username\",\n   *  password: \"password\"\n   * });\n   * ```\n   *\n   * @example\n   * ```js\n   * const rce = new RCEManager();\n   * await rce.init({\n   *  username: \"username\",\n   *  password: \"password\"\n   * }, {\n   *  level: LogLevel.Info,\n   *  file: \"rce.log\"\n   * });\n   */\n  public async init(auth: AuthOptions, logger: LoggerOptions) {\n    this.logger =\n      logger?.instance || new RCELogger(logger?.level, logger?.file);\n\n    const username = auth?.username || process.env.RCE_USERNAME || \"\";\n    const password = auth?.password || process.env.RCE_PASSWORD || \"\";\n\n    this._auth = new GPortalAuth(this);\n    await this._auth.login(username, password);\n\n    this._socket = new GPortalSocket(this, this._auth);\n    this._socket.connect();\n\n    this.servers = new ServerManager(this, this._auth, this._socket);\n  }\n\n  /**\n   * Gracefully close the RCE Manager\n   * @returns {void}\n   *\n   * @example\n   * ```js\n   * const rce = new RCEManager();\n   * rce.destroy();\n   * ```\n   */\n  public destroy() {\n    this._socket.close();\n    this.servers.removeAll();\n    this._auth.destroy();\n    CommandHandler.destroy();\n\n    this.logger.info(\"RCE.JS - Closed Gracefully\");\n  }\n\n  /**\n   * Register a plugin with the RCE Manager\n   * @param name {string} - The name of the plugin\n   * @param instance {any} - The instance of the plugin\n   * @returns {void}\n   *\n   * @example\n   * ```js\n   * const rce = new RCEManager();\n   * rce.registerPlugin(\"myPlugin\", new MyPlugin());\n   * ```\n   */\n  public registerPlugin(name: string, instance: any) {\n    if (this._plugins.has(name)) {\n      return this.logger.warn(`Plugin Is Already Registered: ${name}`);\n    }\n\n    this._plugins.set(name, instance);\n    if (typeof instance.init === \"function\") {\n      instance.init(this);\n    }\n\n    this.logger.info(`Plugin Registered: ${name}`);\n  }\n\n  /**\n   * Get a registered plugin\n   * @param name {string} - The name of the plugin\n   * @returns {any}\n   *\n   * @example\n   * ```js\n   * const rce = new RCEManager();\n   * const myPlugin = rce.getPlugin(\"myPlugin\");\n   * ```\n   */\n  public getPlugin(name: string): any {\n    return this._plugins.get(name);\n  }\n}\n"]}
